commit 4a98389e942c14a908d219a77b8502b1371df9d4
Author: Andrew Price <anprice@redhat.com>
Date:   Fri Mar 28 01:42:47 2014 +0000

    Check program exit code properly
    
    The return value of posix_spawnp() was being checked but the exit status
    of the child process was being ignored. This adds checks and error
    reporting based on the status that waitpid returns.
    
    Signed-off-by: Andrew Price <anprice@redhat.com>

diff --git a/tracers.c b/tracers.c
index 8f96372..ed5efa1 100644
--- a/tracers.c
+++ b/tracers.c
@@ -182,6 +182,7 @@ int run_program2(int argc, char **argv)
 {
 	int i;
 	int err;
+	int status;
 	pid_t pid;
 
 	fprintf(stderr, "running");
@@ -191,11 +192,21 @@ int run_program2(int argc, char **argv)
 
 	err = posix_spawnp(&pid, argv[0], NULL, NULL, argv, environ);
 	if (err != 0) {
-		fprintf(stderr, "%s failed with exit code %d\n", argv[0], err);
-		return err;
+		fprintf(stderr, "Could not run '%s': %s\n", argv[0], strerror(err));
+		return -err;
 	}
-	waitpid(pid, NULL, 0);
-	return 0;
+	waitpid(pid, &status, 0);
+	if (WIFEXITED(status)) {
+		err = WEXITSTATUS(status);
+		if (err == 127) /* spawnp failed after forking */
+			fprintf(stderr, "Failed to run '%s'\n", argv[0]);
+		else if (err)
+			fprintf(stderr, "'%s' failed with exit status %d\n", argv[0], err);
+	} else if (WIFSIGNALED(status)) {
+		fprintf(stderr, "'%s' killed by signal %d\n", argv[0], WTERMSIG(status));
+		return 1;
+	}
+	return err;
 }
 
 int wait_for_tracers(void)
